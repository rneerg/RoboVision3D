#! /env/bash
#********************************************************************************************************************
# *   DTI Robot Co-Worker Bash RC Configuration file 
# *
# * $Revision: 4263 $
# * $Date: 2013-12-03 15:39:45 +0100 (Tue, 03 Dec 2013) $
# * $Author: arf $
# * $Id: DTICoWorkerEnvironment.sh 4263 2013-12-03 14:39:45Z arf $
# *
# *******************************************************************************************************************
#********************* NB ***********************
# Only commit persistent changes to this file!
#************************************************

#*** DTI Configuration ***
# DTI Paths
export DTI_CO_WORKER_ROOT=~/dti_co_worker/trunk/robovision3d
export DTI_COMMON_ROOT=~/dti_co_worker/trunk/robovision3d/src/common

#*** ROS Configuration ***
# ROS Paths
HYDRO_SETUP=/opt/ros/hydro/setup.bash
OROCOS_SETUP=$DTI_COMMON_ROOT/catkin_workspaces/orocos_toolchain_ws/install_isolated/setup.sh
RTT_ROS_SETUP=$DTI_COMMON_ROOT/catkin_workspaces/rtt_ros_integration_ws/devel/setup.sh
COWORKER_SETUP=$DTI_CO_WORKER_ROOT/devel/setup.sh

if [ -f $HYDRO_SETUP ]; then
  source $HYDRO_SETUP
else
  echo "Warning: Unable to source '$HYDRO_SETUP'"
fi

#if [ -f $OROCOS_SETUP ]; then
  #source $OROCOS_SETUP
#else
#  echo "Warning: Unable to source '$OROCOS_SETUP'"
#fi

#if [ -f $RTT_ROS_SETUP ]; then
  #source $RTT_ROS_SETUP
#else
#  echo "Warning: Unable to source '$RTT_ROS_SETUP'"
#fi

if [ -f $COWORKER_SETUP ]; then
  source $COWORKER_SETUP
else
  echo "Warning: Unable to source '$COWORKER_SETUP'"
fi

ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$DTI_COMMON_ROOT/Stacks

#export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$DTI_CO_WORKER_ROOT:$DTI_COMMON_ROOT/Stacks
#export ROS_WORKSPACE=$DTI_CO_WORKER_ROOT

#ROS URI to find the Master server
export ROS_MASTER_URI=http://$MASTER_IP:11311

#*** DTI Logger configuration ***
export DTI_LANGUAGE=EN
export DTI_LOGGER_CONF=$DTI_CO_WORKER_ROOT/DTILoggerSettings.xml
export DTI_LOGGER_DB_SERVER=localhost
export DTI_LOGGER_DB_USER=dti_logging
export DTI_LOGGER_DB_PASSWORD=f5BD4XscydSyQrus
export DTI_LOGGER_DB_DB=dti_co_worker
export DTI_LOGGER_DB_PORT=3306

#** DTI Knowledgebase configuration
export DTI_ROBOT_DB_SERVER=$DTI_LOGGER_DB_SERVER
export DTI_ROBOT_DB_SERVER=robotservices.localdom.net
export DTI_ROBOT_DB_USER=dti_robot
export DTI_ROBOT_DB_PASSWORD=sG1Qh70U1O
export DTI_ROBOT_DB_DB=$DTI_LOGGER_DB_DB
export DTI_ROBOT_DB_PORT=$DTI_LOGGER_DB_PORT

#** Orocos 
export OROCOS_TARGET=gnulinux

#** Halcon11
MACHINE_TYPE=`uname -m`
if test "${MACHINE_TYPE}" = "x86_64"; then
	#echo "64 bit Architecture. Setting HALCONARCH environment variable"
	export HALCONARCH=x64-linux2.4-gcc40
else
	#echo "32 bit Architecture. Setting HALCONARCH environment variable"
	export HALCONARCH=x86sse2-linux2.4-gcc40
fi

export HALCONROOT=/opt/halcon
export HALCONEXAMPLES=/opt/halcon/examples
export HALCONIMAGES=/opt/halcon/images
export PATH=${PATH}:${HALCONROOT}/bin/${HALCONARCH}:${HALCONROOT}/FLEXlm/${HALCONARCH}
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${HALCONROOT}/lib/${HALCONARCH}

#** Aravis GigE library
export ARAVIS_INCLUDE_PATH=/usr/local/include/aravis-0.2

#*** SVN Configuration (generated by install script)
export SVN=svn://robot/dti_co_worker/trunk/dti_co_worker

#** Ensuring that we store the pid of roslaunch
alias roslaunch='roslaunch --pid=/tmp/roscore.pid'

#** alias for fast svn/catkin 
alias dti_make='roscd && cd ../ && catkin_make -j8'
alias dti_up='roscd && cd ../.. && svn up common/ dti_co_worker_ws/'
