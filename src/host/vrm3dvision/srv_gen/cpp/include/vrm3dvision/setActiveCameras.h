/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/srv/setActiveCameras.srv */
#ifndef VRM3DVISION_SERVICE_SETACTIVECAMERAS_H
#define VRM3DVISION_SERVICE_SETACTIVECAMERAS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrm3dvision
{
template <class ContainerAllocator>
struct setActiveCamerasRequest_ {
  typedef setActiveCamerasRequest_<ContainerAllocator> Type;

  setActiveCamerasRequest_()
  : cameras(0)
  {
  }

  setActiveCamerasRequest_(const ContainerAllocator& _alloc)
  : cameras(0)
  {
  }

  typedef int32_t _cameras_type;
  int32_t cameras;

  enum { NONE = 0 };
  enum { LEFT_CENTER_RIGHT = 1 };
  enum { LEFT_RIGHT = 2 };
  enum { LEFT_CENTER = 3 };
  enum { CENTER_RIGHT = 4 };

  typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setActiveCamerasRequest
typedef  ::vrm3dvision::setActiveCamerasRequest_<std::allocator<void> > setActiveCamerasRequest;

typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasRequest> setActiveCamerasRequestPtr;
typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasRequest const> setActiveCamerasRequestConstPtr;



template <class ContainerAllocator>
struct setActiveCamerasResponse_ {
  typedef setActiveCamerasResponse_<ContainerAllocator> Type;

  setActiveCamerasResponse_()
  : success(false)
  {
  }

  setActiveCamerasResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setActiveCamerasResponse
typedef  ::vrm3dvision::setActiveCamerasResponse_<std::allocator<void> > setActiveCamerasResponse;

typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasResponse> setActiveCamerasResponsePtr;
typedef boost::shared_ptr< ::vrm3dvision::setActiveCamerasResponse const> setActiveCamerasResponseConstPtr;


struct setActiveCameras
{

typedef setActiveCamerasRequest Request;
typedef setActiveCamerasResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setActiveCameras
} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "baf587374d661030a32e81f63e495b30";
  }

  static const char* value(const  ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbaf587374d661030ULL;
  static const uint64_t static_value2 = 0xa32e81f63e495b30ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setActiveCamerasRequest";
  }

  static const char* value(const  ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 NONE = 0\n\
int32 LEFT_CENTER_RIGHT = 1\n\
int32 LEFT_RIGHT = 2\n\
int32 LEFT_CENTER = 3\n\
int32 CENTER_RIGHT = 4\n\
\n\
int32 cameras\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setActiveCamerasResponse";
  }

  static const char* value(const  ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cameras);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setActiveCamerasRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setActiveCamerasResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrm3dvision::setActiveCameras> {
  static const char* value() 
  {
    return "e1e2698fca1f66ed6e3d47581a4b30bb";
  }

  static const char* value(const vrm3dvision::setActiveCameras&) { return value(); } 
};

template<>
struct DataType<vrm3dvision::setActiveCameras> {
  static const char* value() 
  {
    return "vrm3dvision/setActiveCameras";
  }

  static const char* value(const vrm3dvision::setActiveCameras&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e1e2698fca1f66ed6e3d47581a4b30bb";
  }

  static const char* value(const vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setActiveCameras";
  }

  static const char* value(const vrm3dvision::setActiveCamerasRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e1e2698fca1f66ed6e3d47581a4b30bb";
  }

  static const char* value(const vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setActiveCameras";
  }

  static const char* value(const vrm3dvision::setActiveCamerasResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VRM3DVISION_SERVICE_SETACTIVECAMERAS_H

