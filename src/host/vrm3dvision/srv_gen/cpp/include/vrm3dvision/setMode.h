/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/srv/setMode.srv */
#ifndef VRM3DVISION_SERVICE_SETMODE_H
#define VRM3DVISION_SERVICE_SETMODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrm3dvision
{
template <class ContainerAllocator>
struct setModeRequest_ {
  typedef setModeRequest_<ContainerAllocator> Type;

  setModeRequest_()
  : type(0)
  {
  }

  setModeRequest_(const ContainerAllocator& _alloc)
  : type(0)
  {
  }

  typedef int32_t _type_type;
  int32_t type;

  enum { STREAMING = 10 };
  enum { PATTERN = 11 };
  enum { HDR = 12 };
  enum { RANDOM_DOT_PATTERN = 13 };

  typedef boost::shared_ptr< ::vrm3dvision::setModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::setModeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setModeRequest
typedef  ::vrm3dvision::setModeRequest_<std::allocator<void> > setModeRequest;

typedef boost::shared_ptr< ::vrm3dvision::setModeRequest> setModeRequestPtr;
typedef boost::shared_ptr< ::vrm3dvision::setModeRequest const> setModeRequestConstPtr;



template <class ContainerAllocator>
struct setModeResponse_ {
  typedef setModeResponse_<ContainerAllocator> Type;

  setModeResponse_()
  : success(false)
  {
  }

  setModeResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::vrm3dvision::setModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::setModeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setModeResponse
typedef  ::vrm3dvision::setModeResponse_<std::allocator<void> > setModeResponse;

typedef boost::shared_ptr< ::vrm3dvision::setModeResponse> setModeResponsePtr;
typedef boost::shared_ptr< ::vrm3dvision::setModeResponse const> setModeResponseConstPtr;


struct setMode
{

typedef setModeRequest Request;
typedef setModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setMode
} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setModeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setModeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::setModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a8063c86292d5e55e38c7d4381e1174a";
  }

  static const char* value(const  ::vrm3dvision::setModeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa8063c86292d5e55ULL;
  static const uint64_t static_value2 = 0xe38c7d4381e1174aULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::setModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setModeRequest";
  }

  static const char* value(const  ::vrm3dvision::setModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::setModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 STREAMING = 10\n\
int32 PATTERN = 11\n\
int32 HDR = 12\n\
int32 RANDOM_DOT_PATTERN = 13\n\
\n\
int32 type\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::setModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::setModeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setModeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setModeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::setModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::vrm3dvision::setModeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::setModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setModeResponse";
  }

  static const char* value(const  ::vrm3dvision::setModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::setModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::setModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::setModeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::setModeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setModeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::setModeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setModeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrm3dvision::setMode> {
  static const char* value() 
  {
    return "301d52529482d266024fa09b9a664426";
  }

  static const char* value(const vrm3dvision::setMode&) { return value(); } 
};

template<>
struct DataType<vrm3dvision::setMode> {
  static const char* value() 
  {
    return "vrm3dvision/setMode";
  }

  static const char* value(const vrm3dvision::setMode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::setModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "301d52529482d266024fa09b9a664426";
  }

  static const char* value(const vrm3dvision::setModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::setModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setMode";
  }

  static const char* value(const vrm3dvision::setModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::setModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "301d52529482d266024fa09b9a664426";
  }

  static const char* value(const vrm3dvision::setModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::setModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setMode";
  }

  static const char* value(const vrm3dvision::setModeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VRM3DVISION_SERVICE_SETMODE_H

