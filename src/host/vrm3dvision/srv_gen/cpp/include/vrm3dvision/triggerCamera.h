/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/srv/triggerCamera.srv */
#ifndef VRM3DVISION_SERVICE_TRIGGERCAMERA_H
#define VRM3DVISION_SERVICE_TRIGGERCAMERA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrm3dvision
{
template <class ContainerAllocator>
struct triggerCameraRequest_ {
  typedef triggerCameraRequest_<ContainerAllocator> Type;

  triggerCameraRequest_()
  : trigger(false)
  {
  }

  triggerCameraRequest_(const ContainerAllocator& _alloc)
  : trigger(false)
  {
  }

  typedef uint8_t _trigger_type;
  uint8_t trigger;


  typedef boost::shared_ptr< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct triggerCameraRequest
typedef  ::vrm3dvision::triggerCameraRequest_<std::allocator<void> > triggerCameraRequest;

typedef boost::shared_ptr< ::vrm3dvision::triggerCameraRequest> triggerCameraRequestPtr;
typedef boost::shared_ptr< ::vrm3dvision::triggerCameraRequest const> triggerCameraRequestConstPtr;



template <class ContainerAllocator>
struct triggerCameraResponse_ {
  typedef triggerCameraResponse_<ContainerAllocator> Type;

  triggerCameraResponse_()
  : success(false)
  {
  }

  triggerCameraResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct triggerCameraResponse
typedef  ::vrm3dvision::triggerCameraResponse_<std::allocator<void> > triggerCameraResponse;

typedef boost::shared_ptr< ::vrm3dvision::triggerCameraResponse> triggerCameraResponsePtr;
typedef boost::shared_ptr< ::vrm3dvision::triggerCameraResponse const> triggerCameraResponseConstPtr;


struct triggerCamera
{

typedef triggerCameraRequest Request;
typedef triggerCameraResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct triggerCamera
} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f6d1152a533bdef9ec687318c8e489b0";
  }

  static const char* value(const  ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf6d1152a533bdef9ULL;
  static const uint64_t static_value2 = 0xec687318c8e489b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/triggerCameraRequest";
  }

  static const char* value(const  ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool trigger\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/triggerCameraResponse";
  }

  static const char* value(const  ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::triggerCameraRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trigger);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct triggerCameraRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::triggerCameraResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct triggerCameraResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrm3dvision::triggerCamera> {
  static const char* value() 
  {
    return "ac73de7c264c9f54be33ec7cca98a512";
  }

  static const char* value(const vrm3dvision::triggerCamera&) { return value(); } 
};

template<>
struct DataType<vrm3dvision::triggerCamera> {
  static const char* value() 
  {
    return "vrm3dvision/triggerCamera";
  }

  static const char* value(const vrm3dvision::triggerCamera&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::triggerCameraRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac73de7c264c9f54be33ec7cca98a512";
  }

  static const char* value(const vrm3dvision::triggerCameraRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::triggerCameraRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/triggerCamera";
  }

  static const char* value(const vrm3dvision::triggerCameraRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::triggerCameraResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac73de7c264c9f54be33ec7cca98a512";
  }

  static const char* value(const vrm3dvision::triggerCameraResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::triggerCameraResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/triggerCamera";
  }

  static const char* value(const vrm3dvision::triggerCameraResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VRM3DVISION_SERVICE_TRIGGERCAMERA_H

