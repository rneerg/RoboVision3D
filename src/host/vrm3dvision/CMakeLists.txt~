cmake_minimum_required(VERSION 2.8.3)
project(vrm3dvision)

set(CMAKE_BUILD_TYPE MinSizeRel)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  message_generation
  image_transport
  roscpp
  std_msgs
  cv_bridge
  sensor_msgs
  camera_info_manager
  driver_base
  dynamic_reconfigure
  pcl_ros
  tf_conversions
  pcl_conversions
  tf
  actionlib
  robot_msgs
  pluginlib
  moveit_core
  moveit_ros_planning_interface
  moveit_ros_perception
  moveit_fake_controller_manager
)

## System dependencies are found with CMake's conventions
find_package(OpenCV REQUIRED)
find_package(Boost REQUIRED COMPONENTS system filesystem)
find_package(OpenMP REQUIRED)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

find_package(VTK REQUIRED)

include(FindProtobuf.cmake)
include(FindZeroMQ.cmake)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  AlignmentPrerejectiveParams.msg
  SurfaceModelParams.msg
)

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   acquirePoseEstimate.srv
   acquireSequenceOnRobot.srv
   computeBestExposure.srv
   createNewModel.srv
   saveNextSequence.srv
   setActiveCameras.srv
   setExposure.srv
   setFrameRate.srv
   setGain.srv
   setMode.srv
   setPattern.srv
   setTriggerMode.srv
   startCamera.srv
   stopCamera.srv
   triggerCamera.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES robot_msgs
  CATKIN_DEPENDS image_transport roscpp std_msgs message_runtime cv_bridge sensor_msgs camera_info_manager driver_base dynamic_reconfigure pcl_ros tf_conversions pcl_conversions tf actionlib robot_msgs pluginlib moveit_core moveit_ros_planning_interface moveit_ros_perception moveit_fake_controller_manager
  DEPENDS system_lib opencv
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
  ${Boost_INCLUDE_DIRS}
)

#include common header files shared with VRmagic D3 code
include_directories(../../common)
include_directories($ENV{HALCONROOT}/include)
include_directories(${VTK_INCLUDE_DIRS})


# VRM Command Node
	add_executable(vrm_command_node
		       src/vrm_command/vrm_command_node.cpp 
              	       src/vrm_command/vrm_command.cpp
		       ../../common/vrm_protocol/MsgHeaders.pb.cc)
									
        set_target_properties(vrm_command_node PROPERTIES COMPILE_FLAGS "-std=c++0x")	# needed for the vrm_protocol	
        add_dependencies(vrm_command_node vrm_command_node_generate_messages_cpp)	
	target_link_libraries(vrm_command_node ${catkin_LIBRARIES} ${ZMQ_LIBRARIES} ${PROTOBUF_LIBRARIES})
# End of VRM Command Node

# VRM Image Proc Node
	add_executable(vrm_image_proc 	
			src/vrm_image_proc/vrm_image_proc_node.cpp
			src/vrm_image_proc/vrm_image_proc.cpp
			src/vrm_image_proc/structured_light_reconstruction.cpp	
			src/vrm_image_proc/occlusion_mask.cpp
			src/vrm_image_proc/visualization.cpp
			src/pose_estimation/pose_estimator.cpp
			src/pose_estimation/surface_model_estimator.cpp
			src/pose_estimation/object_model.cpp
			src/pose_estimation/alignment_prerejective.cpp
			../../common/vrm_protocol/MsgHeaders.pb.cc)
					
	set_target_properties(vrm_image_proc  PROPERTIES COMPILE_FLAGS "-std=c++0x")	# needed for the vrm_protocol	
        add_dependencies(vrm_image_proc vrm_image_proc_generate_messages_cpp)	
	target_link_libraries(vrm_image_proc 
				${catkin_LIBRARIES} 
				${ZMQ_LIBRARIES} 
				${PROTOBUF_LIBRARIES}
				${Boost_LIBRARIES} 
				libvtkCommon.so 
				libvtkFiltering.so 
				libvtkRendering.so 
				$ENV{HALCONROOT}/lib/$ENV{HALCONARCH}/libhalconcpp.so)
# End of VRM Image Proc Node

#VRM Log Node
	add_executable(vrm_log_node 	
		       src/vrm_log/vrm_log_node.cpp)			
	set_target_properties(vrm_log_node  PROPERTIES COMPILE_FLAGS "-std=c++0x")	# needed for the vrm_protocol	
	target_link_libraries(vrm_log_node ${ZMQ_LIBRARIES} ${catkin_LIBRARIES})
# End of VRM Log Node

# zmq_image_publisher_node  Node
	add_executable(zmq_image_publisher_node 	
			src/zmq_image_publisher/zmq_image_publisher_node.cpp
			../../common/vrm_protocol/MsgHeaders.pb.cc)
	set_target_properties(zmq_image_publisher_node  PROPERTIES COMPILE_FLAGS "-std=c++0x")	# needed for the vrm_protocol	
	target_link_libraries(zmq_image_publisher_node ${ZMQ_LIBRARIES} ${PROTOBUF_LIBRARIES} ${catkin_LIBRARIES})
# End of zmq_image_publisher_node

# pcl_pointcloud_viewer  Node
	add_executable(pcl_pointcloud_viewer 	src/pcl_pointcloud_viewer/pcl_pointcloud_viewer_node.cpp)
	target_link_libraries(pcl_pointcloud_viewer ${VTK_LIBRARIES} ${catkin_LIBRARIES})
# End of pcl_pointcloud_viewer

# vrm_calibration  Node
	add_executable(vrm_calibration_node 	src/vrm_calibration/vrm_calibration_node.cpp src/vrm_calibration/vrm_calibration.cpp)
        target_link_libraries(vrm_calibration_node  ${catkin_LIBRARIES})
#	rosbuild_add_openmp_flags(vrm_calibration_node)
# End of vrm_calibration Node

## Declare a cpp library
# add_library(robot_msgs
#   src/${PROJECT_NAME}/robot_msgs.cpp
# )

## Declare a cpp executable
# add_executable(robot_msgs_node src/robot_msgs_node.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(robot_msgs_node robot_msgs_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(robot_msgs_node
#   ${catkin_LIBRARIES}
# )

