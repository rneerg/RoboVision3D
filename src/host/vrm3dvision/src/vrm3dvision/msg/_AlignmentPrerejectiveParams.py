"""autogenerated by genpy from vrm3dvision/AlignmentPrerejectiveParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AlignmentPrerejectiveParams(genpy.Message):
  _md5sum = "a20f28cde22dcefbeefd241cf356edb6"
  _type = "vrm3dvision/AlignmentPrerejectiveParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#### Common parameters
float64 leaf_size
float64 normal_radius_ratio_leaf
float64 feature_radius_ratio_leaf
uint32 	correspondence_randomness
float64 similarity_threshold
uint32 	max_iterations
float64 max_correspondence_distance_ratio_leaf
float64 inlier_fraction

## ICP
uint32 	icp_max_iterations
float64 icp_max_correspondence_distance_ratio_leaf

# Alignment Prerejective
float64 min_score
float64 min_score_threshold





"""
  __slots__ = ['leaf_size','normal_radius_ratio_leaf','feature_radius_ratio_leaf','correspondence_randomness','similarity_threshold','max_iterations','max_correspondence_distance_ratio_leaf','inlier_fraction','icp_max_iterations','icp_max_correspondence_distance_ratio_leaf','min_score','min_score_threshold']
  _slot_types = ['float64','float64','float64','uint32','float64','uint32','float64','float64','uint32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leaf_size,normal_radius_ratio_leaf,feature_radius_ratio_leaf,correspondence_randomness,similarity_threshold,max_iterations,max_correspondence_distance_ratio_leaf,inlier_fraction,icp_max_iterations,icp_max_correspondence_distance_ratio_leaf,min_score,min_score_threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AlignmentPrerejectiveParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leaf_size is None:
        self.leaf_size = 0.
      if self.normal_radius_ratio_leaf is None:
        self.normal_radius_ratio_leaf = 0.
      if self.feature_radius_ratio_leaf is None:
        self.feature_radius_ratio_leaf = 0.
      if self.correspondence_randomness is None:
        self.correspondence_randomness = 0
      if self.similarity_threshold is None:
        self.similarity_threshold = 0.
      if self.max_iterations is None:
        self.max_iterations = 0
      if self.max_correspondence_distance_ratio_leaf is None:
        self.max_correspondence_distance_ratio_leaf = 0.
      if self.inlier_fraction is None:
        self.inlier_fraction = 0.
      if self.icp_max_iterations is None:
        self.icp_max_iterations = 0
      if self.icp_max_correspondence_distance_ratio_leaf is None:
        self.icp_max_correspondence_distance_ratio_leaf = 0.
      if self.min_score is None:
        self.min_score = 0.
      if self.min_score_threshold is None:
        self.min_score_threshold = 0.
    else:
      self.leaf_size = 0.
      self.normal_radius_ratio_leaf = 0.
      self.feature_radius_ratio_leaf = 0.
      self.correspondence_randomness = 0
      self.similarity_threshold = 0.
      self.max_iterations = 0
      self.max_correspondence_distance_ratio_leaf = 0.
      self.inlier_fraction = 0.
      self.icp_max_iterations = 0
      self.icp_max_correspondence_distance_ratio_leaf = 0.
      self.min_score = 0.
      self.min_score_threshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3dIdI2dI3d.pack(_x.leaf_size, _x.normal_radius_ratio_leaf, _x.feature_radius_ratio_leaf, _x.correspondence_randomness, _x.similarity_threshold, _x.max_iterations, _x.max_correspondence_distance_ratio_leaf, _x.inlier_fraction, _x.icp_max_iterations, _x.icp_max_correspondence_distance_ratio_leaf, _x.min_score, _x.min_score_threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 84
      (_x.leaf_size, _x.normal_radius_ratio_leaf, _x.feature_radius_ratio_leaf, _x.correspondence_randomness, _x.similarity_threshold, _x.max_iterations, _x.max_correspondence_distance_ratio_leaf, _x.inlier_fraction, _x.icp_max_iterations, _x.icp_max_correspondence_distance_ratio_leaf, _x.min_score, _x.min_score_threshold,) = _struct_3dIdI2dI3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3dIdI2dI3d.pack(_x.leaf_size, _x.normal_radius_ratio_leaf, _x.feature_radius_ratio_leaf, _x.correspondence_randomness, _x.similarity_threshold, _x.max_iterations, _x.max_correspondence_distance_ratio_leaf, _x.inlier_fraction, _x.icp_max_iterations, _x.icp_max_correspondence_distance_ratio_leaf, _x.min_score, _x.min_score_threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 84
      (_x.leaf_size, _x.normal_radius_ratio_leaf, _x.feature_radius_ratio_leaf, _x.correspondence_randomness, _x.similarity_threshold, _x.max_iterations, _x.max_correspondence_distance_ratio_leaf, _x.inlier_fraction, _x.icp_max_iterations, _x.icp_max_correspondence_distance_ratio_leaf, _x.min_score, _x.min_score_threshold,) = _struct_3dIdI2dI3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3dIdI2dI3d = struct.Struct("<3dIdI2dI3d")
