/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/srv/saveNextSequence.srv */
#ifndef VRM3DVISION_SERVICE_SAVENEXTSEQUENCE_H
#define VRM3DVISION_SERVICE_SAVENEXTSEQUENCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrm3dvision
{
template <class ContainerAllocator>
struct saveNextSequenceRequest_ {
  typedef saveNextSequenceRequest_<ContainerAllocator> Type;

  saveNextSequenceRequest_()
  : folder_name()
  {
  }

  saveNextSequenceRequest_(const ContainerAllocator& _alloc)
  : folder_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _folder_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  folder_name;


  typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct saveNextSequenceRequest
typedef  ::vrm3dvision::saveNextSequenceRequest_<std::allocator<void> > saveNextSequenceRequest;

typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceRequest> saveNextSequenceRequestPtr;
typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceRequest const> saveNextSequenceRequestConstPtr;



template <class ContainerAllocator>
struct saveNextSequenceResponse_ {
  typedef saveNextSequenceResponse_<ContainerAllocator> Type;

  saveNextSequenceResponse_()
  : success(false)
  {
  }

  saveNextSequenceResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct saveNextSequenceResponse
typedef  ::vrm3dvision::saveNextSequenceResponse_<std::allocator<void> > saveNextSequenceResponse;

typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceResponse> saveNextSequenceResponsePtr;
typedef boost::shared_ptr< ::vrm3dvision::saveNextSequenceResponse const> saveNextSequenceResponseConstPtr;


struct saveNextSequence
{

typedef saveNextSequenceRequest Request;
typedef saveNextSequenceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct saveNextSequence
} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f884052b9c91b7fb715d87c498ccd3a7";
  }

  static const char* value(const  ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf884052b9c91b7fbULL;
  static const uint64_t static_value2 = 0x715d87c498ccd3a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/saveNextSequenceRequest";
  }

  static const char* value(const  ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string folder_name\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/saveNextSequenceResponse";
  }

  static const char* value(const  ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.folder_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct saveNextSequenceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct saveNextSequenceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrm3dvision::saveNextSequence> {
  static const char* value() 
  {
    return "c9fdd0b297419b23b31a4fee9a64a8ef";
  }

  static const char* value(const vrm3dvision::saveNextSequence&) { return value(); } 
};

template<>
struct DataType<vrm3dvision::saveNextSequence> {
  static const char* value() 
  {
    return "vrm3dvision/saveNextSequence";
  }

  static const char* value(const vrm3dvision::saveNextSequence&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c9fdd0b297419b23b31a4fee9a64a8ef";
  }

  static const char* value(const vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/saveNextSequence";
  }

  static const char* value(const vrm3dvision::saveNextSequenceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c9fdd0b297419b23b31a4fee9a64a8ef";
  }

  static const char* value(const vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/saveNextSequence";
  }

  static const char* value(const vrm3dvision::saveNextSequenceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VRM3DVISION_SERVICE_SAVENEXTSEQUENCE_H

