/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/srv/setTriggerMode.srv */
#ifndef VRM3DVISION_SERVICE_SETTRIGGERMODE_H
#define VRM3DVISION_SERVICE_SETTRIGGERMODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrm3dvision
{
template <class ContainerAllocator>
struct setTriggerModeRequest_ {
  typedef setTriggerModeRequest_<ContainerAllocator> Type;

  setTriggerModeRequest_()
  : type(0)
  {
  }

  setTriggerModeRequest_(const ContainerAllocator& _alloc)
  : type(0)
  {
  }

  typedef int32_t _type_type;
  int32_t type;

  enum { INTERNAL_TRIGGER = 1 };
  enum { EXTERNAL_TRIGGER = 2 };
  enum { SOFT_TRIGGER = 3 };

  typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setTriggerModeRequest
typedef  ::vrm3dvision::setTriggerModeRequest_<std::allocator<void> > setTriggerModeRequest;

typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeRequest> setTriggerModeRequestPtr;
typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeRequest const> setTriggerModeRequestConstPtr;



template <class ContainerAllocator>
struct setTriggerModeResponse_ {
  typedef setTriggerModeResponse_<ContainerAllocator> Type;

  setTriggerModeResponse_()
  : success(false)
  {
  }

  setTriggerModeResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setTriggerModeResponse
typedef  ::vrm3dvision::setTriggerModeResponse_<std::allocator<void> > setTriggerModeResponse;

typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeResponse> setTriggerModeResponsePtr;
typedef boost::shared_ptr< ::vrm3dvision::setTriggerModeResponse const> setTriggerModeResponseConstPtr;


struct setTriggerMode
{

typedef setTriggerModeRequest Request;
typedef setTriggerModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setTriggerMode
} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "315251678f6e4d166f94515874f8faa9";
  }

  static const char* value(const  ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x315251678f6e4d16ULL;
  static const uint64_t static_value2 = 0x6f94515874f8faa9ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setTriggerModeRequest";
  }

  static const char* value(const  ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 INTERNAL_TRIGGER = 1\n\
int32 EXTERNAL_TRIGGER = 2\n\
int32 SOFT_TRIGGER = 3\n\
\n\
int32 type\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setTriggerModeResponse";
  }

  static const char* value(const  ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::setTriggerModeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setTriggerModeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::setTriggerModeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setTriggerModeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrm3dvision::setTriggerMode> {
  static const char* value() 
  {
    return "f9d7feb10898ffb84ffd482f5c4c9653";
  }

  static const char* value(const vrm3dvision::setTriggerMode&) { return value(); } 
};

template<>
struct DataType<vrm3dvision::setTriggerMode> {
  static const char* value() 
  {
    return "vrm3dvision/setTriggerMode";
  }

  static const char* value(const vrm3dvision::setTriggerMode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f9d7feb10898ffb84ffd482f5c4c9653";
  }

  static const char* value(const vrm3dvision::setTriggerModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::setTriggerModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setTriggerMode";
  }

  static const char* value(const vrm3dvision::setTriggerModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f9d7feb10898ffb84ffd482f5c4c9653";
  }

  static const char* value(const vrm3dvision::setTriggerModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrm3dvision::setTriggerModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/setTriggerMode";
  }

  static const char* value(const vrm3dvision::setTriggerModeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VRM3DVISION_SERVICE_SETTRIGGERMODE_H

