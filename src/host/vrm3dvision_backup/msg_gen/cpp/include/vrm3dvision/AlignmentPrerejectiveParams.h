/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/msg/AlignmentPrerejectiveParams.msg */
#ifndef VRM3DVISION_MESSAGE_ALIGNMENTPREREJECTIVEPARAMS_H
#define VRM3DVISION_MESSAGE_ALIGNMENTPREREJECTIVEPARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace vrm3dvision
{
template <class ContainerAllocator>
struct AlignmentPrerejectiveParams_ {
  typedef AlignmentPrerejectiveParams_<ContainerAllocator> Type;

  AlignmentPrerejectiveParams_()
  : leaf_size(0.0)
  , normal_radius_ratio_leaf(0.0)
  , feature_radius_ratio_leaf(0.0)
  , correspondence_randomness(0)
  , similarity_threshold(0.0)
  , max_iterations(0)
  , max_correspondence_distance_ratio_leaf(0.0)
  , inlier_fraction(0.0)
  , icp_max_iterations(0)
  , icp_max_correspondence_distance_ratio_leaf(0.0)
  , min_score(0.0)
  , min_score_threshold(0.0)
  {
  }

  AlignmentPrerejectiveParams_(const ContainerAllocator& _alloc)
  : leaf_size(0.0)
  , normal_radius_ratio_leaf(0.0)
  , feature_radius_ratio_leaf(0.0)
  , correspondence_randomness(0)
  , similarity_threshold(0.0)
  , max_iterations(0)
  , max_correspondence_distance_ratio_leaf(0.0)
  , inlier_fraction(0.0)
  , icp_max_iterations(0)
  , icp_max_correspondence_distance_ratio_leaf(0.0)
  , min_score(0.0)
  , min_score_threshold(0.0)
  {
  }

  typedef double _leaf_size_type;
  double leaf_size;

  typedef double _normal_radius_ratio_leaf_type;
  double normal_radius_ratio_leaf;

  typedef double _feature_radius_ratio_leaf_type;
  double feature_radius_ratio_leaf;

  typedef uint32_t _correspondence_randomness_type;
  uint32_t correspondence_randomness;

  typedef double _similarity_threshold_type;
  double similarity_threshold;

  typedef uint32_t _max_iterations_type;
  uint32_t max_iterations;

  typedef double _max_correspondence_distance_ratio_leaf_type;
  double max_correspondence_distance_ratio_leaf;

  typedef double _inlier_fraction_type;
  double inlier_fraction;

  typedef uint32_t _icp_max_iterations_type;
  uint32_t icp_max_iterations;

  typedef double _icp_max_correspondence_distance_ratio_leaf_type;
  double icp_max_correspondence_distance_ratio_leaf;

  typedef double _min_score_type;
  double min_score;

  typedef double _min_score_threshold_type;
  double min_score_threshold;


  typedef boost::shared_ptr< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AlignmentPrerejectiveParams
typedef  ::vrm3dvision::AlignmentPrerejectiveParams_<std::allocator<void> > AlignmentPrerejectiveParams;

typedef boost::shared_ptr< ::vrm3dvision::AlignmentPrerejectiveParams> AlignmentPrerejectiveParamsPtr;
typedef boost::shared_ptr< ::vrm3dvision::AlignmentPrerejectiveParams const> AlignmentPrerejectiveParamsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a20f28cde22dcefbeefd241cf356edb6";
  }

  static const char* value(const  ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa20f28cde22dcefbULL;
  static const uint64_t static_value2 = 0xeefd241cf356edb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/AlignmentPrerejectiveParams";
  }

  static const char* value(const  ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#### Common parameters\n\
float64 leaf_size\n\
float64 normal_radius_ratio_leaf\n\
float64 feature_radius_ratio_leaf\n\
uint32 	correspondence_randomness\n\
float64 similarity_threshold\n\
uint32 	max_iterations\n\
float64 max_correspondence_distance_ratio_leaf\n\
float64 inlier_fraction\n\
\n\
## ICP\n\
uint32 	icp_max_iterations\n\
float64 icp_max_correspondence_distance_ratio_leaf\n\
\n\
# Alignment Prerejective\n\
float64 min_score\n\
float64 min_score_threshold\n\
\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.leaf_size);
    stream.next(m.normal_radius_ratio_leaf);
    stream.next(m.feature_radius_ratio_leaf);
    stream.next(m.correspondence_randomness);
    stream.next(m.similarity_threshold);
    stream.next(m.max_iterations);
    stream.next(m.max_correspondence_distance_ratio_leaf);
    stream.next(m.inlier_fraction);
    stream.next(m.icp_max_iterations);
    stream.next(m.icp_max_correspondence_distance_ratio_leaf);
    stream.next(m.min_score);
    stream.next(m.min_score_threshold);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AlignmentPrerejectiveParams_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrm3dvision::AlignmentPrerejectiveParams_<ContainerAllocator> & v) 
  {
    s << indent << "leaf_size: ";
    Printer<double>::stream(s, indent + "  ", v.leaf_size);
    s << indent << "normal_radius_ratio_leaf: ";
    Printer<double>::stream(s, indent + "  ", v.normal_radius_ratio_leaf);
    s << indent << "feature_radius_ratio_leaf: ";
    Printer<double>::stream(s, indent + "  ", v.feature_radius_ratio_leaf);
    s << indent << "correspondence_randomness: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.correspondence_randomness);
    s << indent << "similarity_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.similarity_threshold);
    s << indent << "max_iterations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_iterations);
    s << indent << "max_correspondence_distance_ratio_leaf: ";
    Printer<double>::stream(s, indent + "  ", v.max_correspondence_distance_ratio_leaf);
    s << indent << "inlier_fraction: ";
    Printer<double>::stream(s, indent + "  ", v.inlier_fraction);
    s << indent << "icp_max_iterations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.icp_max_iterations);
    s << indent << "icp_max_correspondence_distance_ratio_leaf: ";
    Printer<double>::stream(s, indent + "  ", v.icp_max_correspondence_distance_ratio_leaf);
    s << indent << "min_score: ";
    Printer<double>::stream(s, indent + "  ", v.min_score);
    s << indent << "min_score_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.min_score_threshold);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VRM3DVISION_MESSAGE_ALIGNMENTPREREJECTIVEPARAMS_H

