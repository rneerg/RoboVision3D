/* Auto-generated by genmsg_cpp for file /home/jeppe/workspace-d3/robovision3d/host/vrm3dvision/msg/SurfaceModelParams.msg */
#ifndef VRM3DVISION_MESSAGE_SURFACEMODELPARAMS_H
#define VRM3DVISION_MESSAGE_SURFACEMODELPARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace vrm3dvision
{
template <class ContainerAllocator>
struct SurfaceModelParams_ {
  typedef SurfaceModelParams_<ContainerAllocator> Type;

  SurfaceModelParams_()
  : rel_sampling_distance(0.0)
  , model_invert_normals(0)
  , pose_ref_rel_sampling_distance(0.0)
  , feat_step_size_rel(0.0)
  , feat_angle_resolution(0)
  , key_point_fraction(0.0)
  , min_score(0.0)
  , return_result_handle(0)
  , num_matches(0)
  , max_overlap_dist_rel(0.0)
  , sparse_pose_refinement(0)
  , score_type()
  , pose_ref_use_scene_normals(0)
  , dense_pose_refinement(0)
  , pose_ref_num_steps(0)
  , pose_ref_sub_sampling(0)
  , pose_ref_dist_threshold_rel(0.0)
  , pose_ref_scoring_dist_rel(0.0)
  , min_score_threshold(0.0)
  , reset_to_default(false)
  {
  }

  SurfaceModelParams_(const ContainerAllocator& _alloc)
  : rel_sampling_distance(0.0)
  , model_invert_normals(0)
  , pose_ref_rel_sampling_distance(0.0)
  , feat_step_size_rel(0.0)
  , feat_angle_resolution(0)
  , key_point_fraction(0.0)
  , min_score(0.0)
  , return_result_handle(0)
  , num_matches(0)
  , max_overlap_dist_rel(0.0)
  , sparse_pose_refinement(0)
  , score_type(_alloc)
  , pose_ref_use_scene_normals(0)
  , dense_pose_refinement(0)
  , pose_ref_num_steps(0)
  , pose_ref_sub_sampling(0)
  , pose_ref_dist_threshold_rel(0.0)
  , pose_ref_scoring_dist_rel(0.0)
  , min_score_threshold(0.0)
  , reset_to_default(false)
  {
  }

  typedef double _rel_sampling_distance_type;
  double rel_sampling_distance;

  typedef int8_t _model_invert_normals_type;
  int8_t model_invert_normals;

  typedef double _pose_ref_rel_sampling_distance_type;
  double pose_ref_rel_sampling_distance;

  typedef double _feat_step_size_rel_type;
  double feat_step_size_rel;

  typedef uint16_t _feat_angle_resolution_type;
  uint16_t feat_angle_resolution;

  typedef double _key_point_fraction_type;
  double key_point_fraction;

  typedef double _min_score_type;
  double min_score;

  typedef int8_t _return_result_handle_type;
  int8_t return_result_handle;

  typedef int8_t _num_matches_type;
  int8_t num_matches;

  typedef double _max_overlap_dist_rel_type;
  double max_overlap_dist_rel;

  typedef int8_t _sparse_pose_refinement_type;
  int8_t sparse_pose_refinement;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _score_type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  score_type;

  typedef int8_t _pose_ref_use_scene_normals_type;
  int8_t pose_ref_use_scene_normals;

  typedef int8_t _dense_pose_refinement_type;
  int8_t dense_pose_refinement;

  typedef uint16_t _pose_ref_num_steps_type;
  uint16_t pose_ref_num_steps;

  typedef uint16_t _pose_ref_sub_sampling_type;
  uint16_t pose_ref_sub_sampling;

  typedef double _pose_ref_dist_threshold_rel_type;
  double pose_ref_dist_threshold_rel;

  typedef double _pose_ref_scoring_dist_rel_type;
  double pose_ref_scoring_dist_rel;

  typedef double _min_score_threshold_type;
  double min_score_threshold;

  typedef uint8_t _reset_to_default_type;
  uint8_t reset_to_default;


  typedef boost::shared_ptr< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SurfaceModelParams
typedef  ::vrm3dvision::SurfaceModelParams_<std::allocator<void> > SurfaceModelParams;

typedef boost::shared_ptr< ::vrm3dvision::SurfaceModelParams> SurfaceModelParamsPtr;
typedef boost::shared_ptr< ::vrm3dvision::SurfaceModelParams const> SurfaceModelParamsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrm3dvision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6b2dd2126c4d039954cc2daa6a9a324e";
  }

  static const char* value(const  ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6b2dd2126c4d0399ULL;
  static const uint64_t static_value2 = 0x54cc2daa6a9a324eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrm3dvision/SurfaceModelParams";
  }

  static const char* value(const  ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#### Common parameters\n\
float64 rel_sampling_distance\n\
\n\
#### Creation parameters\n\
int8 	model_invert_normals\n\
float64 pose_ref_rel_sampling_distance\n\
float64 feat_step_size_rel\n\
uint16 feat_angle_resolution\n\
\n\
#### Detection parameters\n\
\n\
## Approximate matching\n\
float64 key_point_fraction\n\
float64 min_score\n\
int8 	return_result_handle\n\
int8 	num_matches\n\
float64 max_overlap_dist_rel\n\
\n\
## Sparse pose refinement\n\
int8 	sparse_pose_refinement\n\
string 	score_type\n\
int8 	pose_ref_use_scene_normals\n\
\n\
## Dense pose refinement\n\
int8 	dense_pose_refinement\n\
uint16 	pose_ref_num_steps\n\
uint16 	pose_ref_sub_sampling\n\
float64 pose_ref_dist_threshold_rel\n\
float64 pose_ref_scoring_dist_rel\n\
\n\
## Evaluation\n\
float64 min_score_threshold\n\
bool 	reset_to_default\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rel_sampling_distance);
    stream.next(m.model_invert_normals);
    stream.next(m.pose_ref_rel_sampling_distance);
    stream.next(m.feat_step_size_rel);
    stream.next(m.feat_angle_resolution);
    stream.next(m.key_point_fraction);
    stream.next(m.min_score);
    stream.next(m.return_result_handle);
    stream.next(m.num_matches);
    stream.next(m.max_overlap_dist_rel);
    stream.next(m.sparse_pose_refinement);
    stream.next(m.score_type);
    stream.next(m.pose_ref_use_scene_normals);
    stream.next(m.dense_pose_refinement);
    stream.next(m.pose_ref_num_steps);
    stream.next(m.pose_ref_sub_sampling);
    stream.next(m.pose_ref_dist_threshold_rel);
    stream.next(m.pose_ref_scoring_dist_rel);
    stream.next(m.min_score_threshold);
    stream.next(m.reset_to_default);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SurfaceModelParams_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrm3dvision::SurfaceModelParams_<ContainerAllocator> & v) 
  {
    s << indent << "rel_sampling_distance: ";
    Printer<double>::stream(s, indent + "  ", v.rel_sampling_distance);
    s << indent << "model_invert_normals: ";
    Printer<int8_t>::stream(s, indent + "  ", v.model_invert_normals);
    s << indent << "pose_ref_rel_sampling_distance: ";
    Printer<double>::stream(s, indent + "  ", v.pose_ref_rel_sampling_distance);
    s << indent << "feat_step_size_rel: ";
    Printer<double>::stream(s, indent + "  ", v.feat_step_size_rel);
    s << indent << "feat_angle_resolution: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.feat_angle_resolution);
    s << indent << "key_point_fraction: ";
    Printer<double>::stream(s, indent + "  ", v.key_point_fraction);
    s << indent << "min_score: ";
    Printer<double>::stream(s, indent + "  ", v.min_score);
    s << indent << "return_result_handle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.return_result_handle);
    s << indent << "num_matches: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_matches);
    s << indent << "max_overlap_dist_rel: ";
    Printer<double>::stream(s, indent + "  ", v.max_overlap_dist_rel);
    s << indent << "sparse_pose_refinement: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sparse_pose_refinement);
    s << indent << "score_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.score_type);
    s << indent << "pose_ref_use_scene_normals: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pose_ref_use_scene_normals);
    s << indent << "dense_pose_refinement: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dense_pose_refinement);
    s << indent << "pose_ref_num_steps: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pose_ref_num_steps);
    s << indent << "pose_ref_sub_sampling: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pose_ref_sub_sampling);
    s << indent << "pose_ref_dist_threshold_rel: ";
    Printer<double>::stream(s, indent + "  ", v.pose_ref_dist_threshold_rel);
    s << indent << "pose_ref_scoring_dist_rel: ";
    Printer<double>::stream(s, indent + "  ", v.pose_ref_scoring_dist_rel);
    s << indent << "min_score_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.min_score_threshold);
    s << indent << "reset_to_default: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_to_default);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VRM3DVISION_MESSAGE_SURFACEMODELPARAMS_H

