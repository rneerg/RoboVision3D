"""autogenerated by genpy from vrm3dvision/SurfaceModelParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SurfaceModelParams(genpy.Message):
  _md5sum = "6b2dd2126c4d039954cc2daa6a9a324e"
  _type = "vrm3dvision/SurfaceModelParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#### Common parameters
float64 rel_sampling_distance

#### Creation parameters
int8 	model_invert_normals
float64 pose_ref_rel_sampling_distance
float64 feat_step_size_rel
uint16 feat_angle_resolution

#### Detection parameters

## Approximate matching
float64 key_point_fraction
float64 min_score
int8 	return_result_handle
int8 	num_matches
float64 max_overlap_dist_rel

## Sparse pose refinement
int8 	sparse_pose_refinement
string 	score_type
int8 	pose_ref_use_scene_normals

## Dense pose refinement
int8 	dense_pose_refinement
uint16 	pose_ref_num_steps
uint16 	pose_ref_sub_sampling
float64 pose_ref_dist_threshold_rel
float64 pose_ref_scoring_dist_rel

## Evaluation
float64 min_score_threshold
bool 	reset_to_default



"""
  __slots__ = ['rel_sampling_distance','model_invert_normals','pose_ref_rel_sampling_distance','feat_step_size_rel','feat_angle_resolution','key_point_fraction','min_score','return_result_handle','num_matches','max_overlap_dist_rel','sparse_pose_refinement','score_type','pose_ref_use_scene_normals','dense_pose_refinement','pose_ref_num_steps','pose_ref_sub_sampling','pose_ref_dist_threshold_rel','pose_ref_scoring_dist_rel','min_score_threshold','reset_to_default']
  _slot_types = ['float64','int8','float64','float64','uint16','float64','float64','int8','int8','float64','int8','string','int8','int8','uint16','uint16','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rel_sampling_distance,model_invert_normals,pose_ref_rel_sampling_distance,feat_step_size_rel,feat_angle_resolution,key_point_fraction,min_score,return_result_handle,num_matches,max_overlap_dist_rel,sparse_pose_refinement,score_type,pose_ref_use_scene_normals,dense_pose_refinement,pose_ref_num_steps,pose_ref_sub_sampling,pose_ref_dist_threshold_rel,pose_ref_scoring_dist_rel,min_score_threshold,reset_to_default

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SurfaceModelParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rel_sampling_distance is None:
        self.rel_sampling_distance = 0.
      if self.model_invert_normals is None:
        self.model_invert_normals = 0
      if self.pose_ref_rel_sampling_distance is None:
        self.pose_ref_rel_sampling_distance = 0.
      if self.feat_step_size_rel is None:
        self.feat_step_size_rel = 0.
      if self.feat_angle_resolution is None:
        self.feat_angle_resolution = 0
      if self.key_point_fraction is None:
        self.key_point_fraction = 0.
      if self.min_score is None:
        self.min_score = 0.
      if self.return_result_handle is None:
        self.return_result_handle = 0
      if self.num_matches is None:
        self.num_matches = 0
      if self.max_overlap_dist_rel is None:
        self.max_overlap_dist_rel = 0.
      if self.sparse_pose_refinement is None:
        self.sparse_pose_refinement = 0
      if self.score_type is None:
        self.score_type = ''
      if self.pose_ref_use_scene_normals is None:
        self.pose_ref_use_scene_normals = 0
      if self.dense_pose_refinement is None:
        self.dense_pose_refinement = 0
      if self.pose_ref_num_steps is None:
        self.pose_ref_num_steps = 0
      if self.pose_ref_sub_sampling is None:
        self.pose_ref_sub_sampling = 0
      if self.pose_ref_dist_threshold_rel is None:
        self.pose_ref_dist_threshold_rel = 0.
      if self.pose_ref_scoring_dist_rel is None:
        self.pose_ref_scoring_dist_rel = 0.
      if self.min_score_threshold is None:
        self.min_score_threshold = 0.
      if self.reset_to_default is None:
        self.reset_to_default = False
    else:
      self.rel_sampling_distance = 0.
      self.model_invert_normals = 0
      self.pose_ref_rel_sampling_distance = 0.
      self.feat_step_size_rel = 0.
      self.feat_angle_resolution = 0
      self.key_point_fraction = 0.
      self.min_score = 0.
      self.return_result_handle = 0
      self.num_matches = 0
      self.max_overlap_dist_rel = 0.
      self.sparse_pose_refinement = 0
      self.score_type = ''
      self.pose_ref_use_scene_normals = 0
      self.dense_pose_refinement = 0
      self.pose_ref_num_steps = 0
      self.pose_ref_sub_sampling = 0
      self.pose_ref_dist_threshold_rel = 0.
      self.pose_ref_scoring_dist_rel = 0.
      self.min_score_threshold = 0.
      self.reset_to_default = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_db2dH2d2bdb.pack(_x.rel_sampling_distance, _x.model_invert_normals, _x.pose_ref_rel_sampling_distance, _x.feat_step_size_rel, _x.feat_angle_resolution, _x.key_point_fraction, _x.min_score, _x.return_result_handle, _x.num_matches, _x.max_overlap_dist_rel, _x.sparse_pose_refinement))
      _x = self.score_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2b2H3dB.pack(_x.pose_ref_use_scene_normals, _x.dense_pose_refinement, _x.pose_ref_num_steps, _x.pose_ref_sub_sampling, _x.pose_ref_dist_threshold_rel, _x.pose_ref_scoring_dist_rel, _x.min_score_threshold, _x.reset_to_default))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.rel_sampling_distance, _x.model_invert_normals, _x.pose_ref_rel_sampling_distance, _x.feat_step_size_rel, _x.feat_angle_resolution, _x.key_point_fraction, _x.min_score, _x.return_result_handle, _x.num_matches, _x.max_overlap_dist_rel, _x.sparse_pose_refinement,) = _struct_db2dH2d2bdb.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.score_type = str[start:end].decode('utf-8')
      else:
        self.score_type = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.pose_ref_use_scene_normals, _x.dense_pose_refinement, _x.pose_ref_num_steps, _x.pose_ref_sub_sampling, _x.pose_ref_dist_threshold_rel, _x.pose_ref_scoring_dist_rel, _x.min_score_threshold, _x.reset_to_default,) = _struct_2b2H3dB.unpack(str[start:end])
      self.reset_to_default = bool(self.reset_to_default)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_db2dH2d2bdb.pack(_x.rel_sampling_distance, _x.model_invert_normals, _x.pose_ref_rel_sampling_distance, _x.feat_step_size_rel, _x.feat_angle_resolution, _x.key_point_fraction, _x.min_score, _x.return_result_handle, _x.num_matches, _x.max_overlap_dist_rel, _x.sparse_pose_refinement))
      _x = self.score_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2b2H3dB.pack(_x.pose_ref_use_scene_normals, _x.dense_pose_refinement, _x.pose_ref_num_steps, _x.pose_ref_sub_sampling, _x.pose_ref_dist_threshold_rel, _x.pose_ref_scoring_dist_rel, _x.min_score_threshold, _x.reset_to_default))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.rel_sampling_distance, _x.model_invert_normals, _x.pose_ref_rel_sampling_distance, _x.feat_step_size_rel, _x.feat_angle_resolution, _x.key_point_fraction, _x.min_score, _x.return_result_handle, _x.num_matches, _x.max_overlap_dist_rel, _x.sparse_pose_refinement,) = _struct_db2dH2d2bdb.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.score_type = str[start:end].decode('utf-8')
      else:
        self.score_type = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.pose_ref_use_scene_normals, _x.dense_pose_refinement, _x.pose_ref_num_steps, _x.pose_ref_sub_sampling, _x.pose_ref_dist_threshold_rel, _x.pose_ref_scoring_dist_rel, _x.min_score_threshold, _x.reset_to_default,) = _struct_2b2H3dB.unpack(str[start:end])
      self.reset_to_default = bool(self.reset_to_default)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2b2H3dB = struct.Struct("<2b2H3dB")
_struct_db2dH2d2bdb = struct.Struct("<db2dH2d2bdb")
