"""autogenerated by genpy from vrm3dvision/setPatternRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class setPatternRequest(genpy.Message):
  _md5sum = "28724d00da03246f122f3dd4c81ba15b"
  _type = "vrm3dvision/setPatternRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 LARGE_GAP_GC = 0
int32 CONVENTIONAL_GC = 1

bool partial_view
int32 resolution
int32 type
bool use_simple_occlusion
bool add_point_colors

"""
  # Pseudo-constants
  LARGE_GAP_GC = 0
  CONVENTIONAL_GC = 1

  __slots__ = ['partial_view','resolution','type','use_simple_occlusion','add_point_colors']
  _slot_types = ['bool','int32','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       partial_view,resolution,type,use_simple_occlusion,add_point_colors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(setPatternRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.partial_view is None:
        self.partial_view = False
      if self.resolution is None:
        self.resolution = 0
      if self.type is None:
        self.type = 0
      if self.use_simple_occlusion is None:
        self.use_simple_occlusion = False
      if self.add_point_colors is None:
        self.add_point_colors = False
    else:
      self.partial_view = False
      self.resolution = 0
      self.type = 0
      self.use_simple_occlusion = False
      self.add_point_colors = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2i2B.pack(_x.partial_view, _x.resolution, _x.type, _x.use_simple_occlusion, _x.add_point_colors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.partial_view, _x.resolution, _x.type, _x.use_simple_occlusion, _x.add_point_colors,) = _struct_B2i2B.unpack(str[start:end])
      self.partial_view = bool(self.partial_view)
      self.use_simple_occlusion = bool(self.use_simple_occlusion)
      self.add_point_colors = bool(self.add_point_colors)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2i2B.pack(_x.partial_view, _x.resolution, _x.type, _x.use_simple_occlusion, _x.add_point_colors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.partial_view, _x.resolution, _x.type, _x.use_simple_occlusion, _x.add_point_colors,) = _struct_B2i2B.unpack(str[start:end])
      self.partial_view = bool(self.partial_view)
      self.use_simple_occlusion = bool(self.use_simple_occlusion)
      self.add_point_colors = bool(self.add_point_colors)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2i2B = struct.Struct("<B2i2B")
"""autogenerated by genpy from vrm3dvision/setPatternResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class setPatternResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "vrm3dvision/setPatternResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(setPatternResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class setPattern(object):
  _type          = 'vrm3dvision/setPattern'
  _md5sum = '2251a41e841e515d865157e5f0247c6a'
  _request_class  = setPatternRequest
  _response_class = setPatternResponse
